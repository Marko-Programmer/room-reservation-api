# Технічне завдання (ТЗ): Система бронювання кімнат

---

## Загальний опис:

Система дозволяє користувачам переглядати кімнати, бронювати їх, переглядати свої бронювання,
а адміністраторам — керувати кімнатами та бронюваннями.

---

## Основні сутності:

### 1. **Room** (Кімната)

* `id` (Long, унікальний ідентифікатор)
* `name` (String) — назва кімнати
* `capacity` (int) — кількість людей, що може вмістити кімната
* `location` (String) — розташування кімнати (поверх, будівля)
* `available` (Boolean) — чи доступна кімната для бронювання

---

### 2. **Booking** (Бронювання)

* `id` (Long)
* `room` (Room) — зв’язок до кімнати
* `user` (String) — ім’я користувача, який бронює
* `startTime` (LocalDateTime) — початок бронювання
* `endTime` (LocalDateTime) — кінець бронювання
* `status` (Enum: CONFIRMED, CANCELLED) — статус бронювання

---

## Функціональні вимоги:

### 1. CRUD для кімнат (Room)

* Створення, редагування, видалення кімнат

* Пошук кімнат за параметрами:
  * фільтрація за доступністю (`available`)
  * фільтрація за локацією
  * пошук за назвою (частковий збіг)

* Пагінація та сортування кімнат за назвою, місткістю, локацією

---

### 2. Бронювання (Booking)

* Створення нового бронювання (при умові, що кімната доступна і на вказаний час немає перетину з іншими бронюваннями)
* Перегляд бронювань користувача з пагінацією
* Скасування бронювання
* Перевірка доступності кімнати на заданий період (неперетин з іншими бронюваннями)
* Зміна статусу бронювання (CONFIRMED, CANCELLED)

---

### 3. Транзакції і рівні ізоляції

* Операція створення бронювання повинна бути **транзакційною**: перевірка доступності + збереження бронювання
* Використовуй відповідний рівень ізоляції, щоб уникнути проблем конкурентності (наприклад, phantom read —
коли дві транзакції одночасно намагаються забронювати кімнату на один і той же час)
* При скасуванні бронювання також використовувати транзакцію

---

### 4. REST API — приклади ендпоінтів:

| Метод  | Шлях                       | Опис                                              | Параметри/тіло                                                     |
| ------ | -------------------------- | ------------------------------------------------- | ------------------------------------------------------------------ |
| GET    | `/rooms`                   | Отримати список кімнат з пагінацією і сортуванням | `page`, `size`, `sortBy`, `order`, `available`, `location`, `name` |
| POST   | `/rooms`                   | Створити кімнату                                  | JSON Room                                                          |
| PUT    | `/rooms/{id}`              | Оновити кімнату                                   | JSON Room                                                          |
| DELETE | `/rooms/{id}`              | Видалити кімнату                                  |                                                                    |
| GET    | `/bookings`                | Отримати бронювання користувача з пагінацією      | `user`, `page`, `size`                                             |
| POST   | `/bookings`                | Створити бронювання                               | JSON Booking (roomId, user, startTime, endTime)                    |
| PUT    | `/bookings/{id}/cancel`    | Скасувати бронювання                              |                                                                    |
| GET    | `/bookings/{id}/availability` | Перевірити доступність кімнати на період          | `startTime`, `endTime`                                             |

---

### 5. DTO:

* Для повернення кімнат та бронювань зроби DTO (наприклад, RoomDTO, BookingDTO) — щоб не повертати зайві дані.
* Наприклад, для RoomDTO можна показувати тільки `id`, `name`, `capacity`, `location`, `available`.
* Для BookingDTO — `id`, `roomName`, `user`, `startTime`, `endTime`, `status`.

---

### 6. Валідація:

* Перевірка коректності часу (startTime < endTime)
* Неможливість бронювати кімнату, яка недоступна або зайнята в цей час
* Валідація вхідних параметрів в контролері

---


## Технічні деталі і рекомендації:

* Використовуй Spring Data JPA, JpaRepository для репозиторіїв
* Використовуй `@Query` для складних запитів (перевірка доступності, пошук)
* Пагінація та сортування через Pageable
* Транзакції через `@Transactional` і рівні ізоляції для операцій бронювання
* Формуй REST API у контролерах з відповідними методами HTTP
* Використовуй DTO для передачі даних з сервісу в контролер
* Валідація через Hibernate Validator (`@Valid`, `@NotNull`, кастомні перевірки)

---

## Приклад роботи:

1. Користувач робить GET `/rooms?page=0&size=5&sortBy=capacity&order=asc&available=true&location=1st Floor`
— отримує список кімнат.

2. Користувач вибирає кімнату, перевіряє її доступність
 на час через GET `/rooms/{id}/availability?startTime=2025-08-01T10:00&endTime=2025-08-01T12:00`

3. Якщо доступна — створює бронювання POST `/bookings` з телом:
 `{ "roomId": 12, "user": "Marko", "startTime": "...", "endTime": "..." }`

4. Бронювання зберігається транзакційно, виконується перевірка перекриття з іншими бронюваннями
5. Користувач переглядає свої бронювання GET `/bookings?user=Marko&page=0&size=5`
6. Може скасувати бронювання PUT `/bookings/{id}/cancel`

 